import streamlit as st
import requests
import datetime as dt
import json
import os

# -------- WHO Í∂åÏû•Îüâ Î°úÏßÅ --------
def recommended_minutes_per_day(age, experience):
    base = 30
    if age >= 50:
        base -= 5
    if experience == "none":
        base -= 5
    elif experience == "advanced":
        base += 10
    return max(base, 15)

# -------- ÎàÑÏ†Å Îã¨ÏÑ±Î•† Í≥ÑÏÇ∞ --------
def calculate_achievement(records, daily_target):
    today = dt.date.today()
    this_week = [r for r in records if (today - dt.date.fromisoformat(r["date"])).days < 7]
    total = sum(r["minutes"] for r in this_week)
    target = daily_target * 7
    return round(total / target * 100, 1)

# -------- Ïö¥Îèô Ï∂îÏ≤ú (ExerciseDB API) --------
def get_exercises(body_part="legs", limit=3):
    url = "https://exercisedb.dev/api/v1/exercises"
    try:
        res = requests.get(url, params={"bodyPart": body_part})
        data = res.json()
        return data[:limit]
    except Exception:
        return []

# -------- Streamlit UI --------
st.title("üèÉ‚Äç‚ôÇÔ∏è 30ÎåÄ Ïù¥ÏÉÅ ÏÑ±Ïù∏ ÌïòÎ£® Í∂åÏû• Ïö¥ÎèôÎüâ Ìä∏ÎûòÏª§")

st.sidebar.header("ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏûÖÎ†•")
name = st.sidebar.text_input("Ïù¥Î¶Ñ", "ÌôçÍ∏∏Îèô")
age = st.sidebar.number_input("ÎÇòÏù¥", 30, 80, 35)
gender = st.sidebar.selectbox("ÏÑ±Î≥Ñ", ["ÎÇ®ÏÑ±", "Ïó¨ÏÑ±"])
weight = st.sidebar.number_input("Ï≤¥Ï§ë (kg)", 40, 120, 70)
experience = st.sidebar.selectbox("Ïö¥Îèô Í≤ΩÌóò", ["none", "intermediate", "advanced"])

daily_target = recommended_minutes_per_day(age, experience)
st.write(f"‚úÖ {name}ÎãòÏùò ÌïòÎ£® Í∂åÏû• Ïö¥ÎèôÎüâ: **{daily_target}Î∂Ñ**")

# Ïö¥Îèô Í∏∞Î°ù
if "records" not in st.session_state:
    st.session_state["records"] = []

minutes = st.number_input("Ïò§Îäò Ïö¥ÎèôÌïú ÏãúÍ∞Ñ (Î∂Ñ)", 0, 180, 30)
if st.button("Ïö¥Îèô Í∏∞Î°ù Ï†ÄÏû•"):
    st.session_state["records"].append({
        "date": str(dt.date.today()),
        "minutes": minutes
    })
    st.success("Ïö¥Îèô Í∏∞Î°ùÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§ ‚úÖ")

# Îã¨ÏÑ±Î•† Í≥ÑÏÇ∞
if st.session_state["records"]:
    achievement = calculate_achievement(st.session_state["records"], daily_target)
    st.metric("Ïù¥Î≤à Ï£º Îã¨ÏÑ±Î•†", f"{achievement}%")
else:
    st.info("Ïö¥Îèô Í∏∞Î°ùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")

# Ïö¥Îèô Ï∂îÏ≤ú ÏÑπÏÖò
st.subheader("üí™ Ï∂îÏ≤ú Ïö¥Îèô (ÌïòÏ≤¥ Í∏∞Ï§Ä)")
for ex in get_exercises("legs"):
    st.write(f"**{ex['name']}** - {ex['target']}")
